{"version":3,"sources":["contexts/PlaylistsContext.js","contexts/PlaylistsContextProvider.js","components/Form/Input/Input.js","components/Form/SelectInput/SelectInput.js","constants.js","hooks/useDevice.js","components/Form/Datepicker/Datepicker.js","api/getFeaturedPlaylists.js","components/Filters/Filters.js","api/getFilters.js","assets/search-solid.svg","components/NavbarFilter/NavbarFilter.js","components/Playlists/PlaylistCard.js","components/Playlists/filterPlaylists.js","components/Playlists/Playlists.js","pages/Home/Home.js","pages/Login/Login.js","components/Toast/Toast.js","api/handleResponseError.js","api/token.js","App.js","serviceWorker.js","index.js"],"names":["PlaylistsContext","createContext","PlaylistsContextProvider","children","initialPlaylists","useState","playlists","setPlaylists","Provider","value","defaultProps","Input","formik","field","type","placeholder","styleType","min","get","max","className","htmlFor","id","name","classNames","onChange","handleChange","values","step","SelectInput","map","option","key","REFRESH_INTERVAL","DESKTOP_DEVICE_BREAKPOINT","CLIENT_ID","process","REDIRECT_URL","constants","useDevice","device","setDevice","useEffect","isTouch","window","innerWidth","isDesktop","Datepicker","selected","date","setFieldValue","showTimeSelect","timeIntervals","event","target","dateValue","Date","toISOString","parseEmptyValues","Object","entries","reduce","accumulator","getFeaturedPlaylists","a","async","parsedValues","axios","params","response","data","items","parseInitialValues","filters","filter","Filters","closeNavbar","useContext","intervalId","useRef","useFormik","initialValues","onSubmit","setSubmitting","current","clearInterval","then","newPlaylists","setInterval","refreshedPlaylists","catch","finally","handleSubmit","validation","entityType","primitiveType","Error","renderFilter","isSubmitting","getFilters","_extends","assign","i","arguments","length","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","fill","d","_ref","svgRef","title","props","focusable","role","viewBox","ref","ForwardRef","forwardRef","NavbarFilter","setFilters","isOpen","setIsOpen","newFilters","aria-label","onClick","PlaylistCard","playlist","description","imageUrl","spotifyLink","href","src","alt","filterPlaylists","lowerCaseFilter","toLowerCase","includes","Playlists","filteredPlaylists","setFilteredPlaylists","hasfilter","newFilteredPlaylists","Home","Login","encodeURIComponent","Toast","sessionExpired","errorMessage","handleResponseError","error","status","toast","localStorage","removeItem","message","Promise","reject","interceptors","use","App","isLoadingToken","setIsLoadingToken","isLoggedIn","setisLoggedIn","token","getItem","queryString","parse","location","hash","access_token","history","pushState","split","getToken","setItem","defaults","headers","common","Authorization","setToken","position","autoClose","closeOnClick","pauseOnVisibilityChange","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b01e40c.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst PlaylistsContext = createContext();\n\nexport default PlaylistsContext;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport PlaylistsContext from './PlaylistsContext';\n\nconst PlaylistsContextProvider = ({ children, initialPlaylists }) => {\n  const [playlists, setPlaylists] = useState(initialPlaylists);\n\n  return (\n    <PlaylistsContext.Provider value={{ playlists, setPlaylists }}>\n      {children}\n    </PlaylistsContext.Provider>\n  );\n};\n\nPlaylistsContextProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  initialPlaylists: PropTypes.array,\n};\n\nPlaylistsContextProvider.defaultProps = {\n  initialPlaylists: null,\n};\n\nexport default PlaylistsContextProvider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport classNames from 'classnames';\n\nimport './Input.scss';\n\nconst Input = ({\n  formik,\n  field,\n  type,\n  placeholder,\n  styleType,\n}) => {\n  const min = get(field, 'validation.min');\n  const max = get(field, 'validation.max');\n\n  return (\n    <div className=\"field\">\n      <label htmlFor={field.id}>{field.name}</label>\n      <input\n        className={classNames('input', {\n          'input--is-white': styleType === 'white',\n        })}\n        id={field.id}\n        type={type}\n        placeholder={placeholder}\n        onChange={formik.handleChange}\n        value={formik.values[field.id]}\n        min={min || 0}\n        max={max}\n        step=\"1\"\n      />\n    </div>\n  );\n};\n\nInput.propTypes = {\n  formik: PropTypes.object.isRequired,\n  field: PropTypes.object.isRequired,\n  type: PropTypes.string,\n  placeholder: PropTypes.string,\n  styleType: PropTypes.oneOf(['dark', 'white']),\n};\n\nInput.defaultProps = {\n  type: 'text',\n  placeholder: '',\n  styleType: 'dark',\n};\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './SelectInput.scss';\n\nconst SelectInput = ({ formik, field }) => (\n  <div className=\"select-input field\">\n    <label htmlFor={field.id}>{field.name}</label>\n    <div className=\"select\">\n      <select id={field.id} onChange={formik.handleChange}>\n        <option value=\"\"> </option>\n        {field.values.map((option) => (\n          <option key={option.value} value={option.value}>\n            {option.name}\n          </option>\n        ))}\n      </select>\n    </div>\n  </div>\n);\n\nSelectInput.propTypes = {\n  formik: PropTypes.object.isRequired,\n  field: PropTypes.object.isRequired,\n};\n\nexport default SelectInput;\n","\nconst clientId = process.env.REACT_APP_CLIENT_ID;\nconst redirectUri = process.env.NODE_ENV === 'development'\n  ? process.env.REACT_APP_REDIRECT_URL_DEV\n  : process.env.REACT_APP_REDIRECT_URL;\n\nexport default {\n  REFRESH_INTERVAL: 30000,\n  DESKTOP_DEVICE_BREAKPOINT: 1024,\n  CLIENT_ID: clientId,\n  REDIRECT_URL: redirectUri,\n};\n","import { useState, useEffect } from 'react';\nimport constants from '../constants';\n\nconst { DESKTOP_DEVICE_BREAKPOINT } = constants;\n\nconst useDevice = () => {\n  const [device, setDevice] = useState({});\n\n  useEffect(() => {\n    setDevice({\n      isTouch: window.innerWidth < DESKTOP_DEVICE_BREAKPOINT,\n      isDesktop: window.innerWidth >= DESKTOP_DEVICE_BREAKPOINT,\n    });\n  }, []);\n\n  return device;\n};\n\nexport default useDevice;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nimport './Datepicker.scss';\nimport useDevice from '../../../hooks/useDevice';\n\nconst Datepicker = ({ formik, field }) => {\n  const { isTouch } = useDevice();\n\n  return (\n    <div className=\"datepicker field\">\n      <label htmlFor={field.id}>{field.name}</label>\n      {/* render a nice interface with datepicker instead of the native on desktop */}\n      {!isTouch && (\n        <DatePicker\n          id={field.id}\n          selected={formik.values[field.id]}\n          onChange={(date) => formik.setFieldValue(field.id, date)}\n          showTimeSelect\n          timeIntervals={60}\n          className=\"input\"\n        />\n      )}\n      {isTouch && (\n        <input\n          id={field.id}\n          className=\"input\"\n          type=\"datetime-local\"\n          onChange={(event) => {\n            const { value } = event.target;\n            const dateValue = new Date(value).toISOString();\n            formik.setFieldValue(field.id, dateValue);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nDatepicker.propTypes = {\n  formik: PropTypes.object.isRequired,\n  field: PropTypes.object.isRequired,\n};\n\nexport default Datepicker;\n","import axios from 'axios';\n\nconst parseEmptyValues = (values) => {\n  const entries = Object.entries(values);\n\n  return entries.reduce((accumulator, [key, value]) => {\n    if (value === '') {\n      return accumulator;\n    }\n\n    return { ...accumulator, [key]: value };\n  }, {});\n};\n\nconst getFeaturedPlaylists = async (values) => {\n  // all fields are optional, remove empty values for the search\n  const parsedValues = parseEmptyValues(values);\n  const response = await axios.get('https://api.spotify.com/v1/browse/featured-playlists', {\n    params: parsedValues,\n  });\n\n  return response.data.playlists.items;\n};\n\nexport default getFeaturedPlaylists;\n","import React, { useContext, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormik } from 'formik';\nimport classNames from 'classnames';\n\nimport PlaylistsContext from '../../contexts/PlaylistsContext';\nimport Input from '../Form/Input/Input';\nimport SelectInput from '../Form/SelectInput/SelectInput';\nimport Datepicker from '../Form/Datepicker/Datepicker';\nimport getFeaturedPlaylists from '../../api/getFeaturedPlaylists';\nimport constants from '../../constants';\nimport './Filters.scss';\n\nconst { REFRESH_INTERVAL } = constants;\n\nconst parseInitialValues = (filters) => (\n  filters.reduce((accumulator, filter) => (\n    {\n      ...accumulator,\n      [filter.id]: '',\n    }\n  ), {})\n);\n\nconst Filters = ({ filters, closeNavbar }) => {\n  const { setPlaylists } = useContext(PlaylistsContext);\n  const intervalId = useRef(null);\n  const formik = useFormik({\n    initialValues: parseInitialValues(filters),\n    onSubmit: (values, { setSubmitting }) => {\n      if (intervalId.current) {\n        clearInterval(intervalId.current);\n      }\n\n      getFeaturedPlaylists(values)\n        .then((newPlaylists) => {\n          setPlaylists(newPlaylists);\n          closeNavbar();\n\n          // refresh playlists to update the result in case of changes\n          intervalId.current = setInterval(() => {\n            getFeaturedPlaylists(values)\n              .then((refreshedPlaylists) => setPlaylists(refreshedPlaylists))\n              .catch(() => clearInterval(intervalId.current));\n          }, REFRESH_INTERVAL);\n        })\n        .finally(() => setSubmitting(false));\n    },\n  });\n\n  const renderFilter = (filter) => {\n    if (filter.values) {\n      return <SelectInput formik={formik} field={filter} key={filter.id} />;\n    }\n\n    if (filter.validation && filter.validation.entityType === 'DATE_TIME') {\n      return <Datepicker formik={formik} field={filter} key={filter.id} />;\n    }\n\n    if (filter.validation && filter.validation.primitiveType === 'INTEGER') {\n      return <Input type=\"number\" formik={formik} field={filter} key={filter.id} />;\n    }\n\n    throw new Error(`Unknow filter type in '${filter.id}'`);\n  };\n\n  return (\n    <form className=\"filters\" onSubmit={formik.handleSubmit}>\n      <div className=\"filters__fields\">\n        {filters.map((filter) => (\n          renderFilter(filter)\n        ))}\n      </div>\n      <button\n        type=\"submit\"\n        className={classNames('button is-primary is-fullwidth', {\n          'is-loading': formik.isSubmitting,\n        })}\n      >\n        Buscar playlists\n      </button>\n    </form>\n  );\n};\n\nFilters.propTypes = {\n  filters: PropTypes.array.isRequired,\n  closeNavbar: PropTypes.func,\n};\n\nFilters.defaultProps = {\n  closeNavbar: () => {},\n};\n\nexport default Filters;\n","import axios from 'axios';\n\nconst getFilters = async () => {\n  const response = await axios.get('https://www.mocky.io/v2/5a25fade2e0000213aa90776');\n  return response.data.filters;\n};\n\nexport default getFilters;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z\"\n});\n\nvar SvgSearchSolid = function SvgSearchSolid(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    \"data-prefix\": \"fas\",\n    \"data-icon\": \"search\",\n    className: \"svg-inline--fa fa-search fa-w-16\",\n    role: \"img\",\n    viewBox: \"0 0 512 512\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgSearchSolid, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/search-solid.f66bfb1e.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\n\nimport Filters from '../Filters/Filters';\nimport getFilters from '../../api/getFilters';\nimport { ReactComponent as SearchSolid } from '../../assets/search-solid.svg';\nimport './NavbarFilter.scss';\n\nconst NavbarFilter = () => {\n  const [filters, setFilters] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    getFilters()\n      .then((newFilters) => setFilters(newFilters));\n  }, []);\n\n  const isLoadingFilters = filters === null;\n  if (isLoadingFilters) {\n    return (\n      <nav className=\"navbar-filter\" />\n    );\n  }\n\n  return (\n    <>\n      <nav className={classNames('navbar-filter', {\n        'navbar-filter--is-open': isOpen,\n      })}\n      >\n        <Filters filters={filters} closeNavbar={() => setIsOpen(false)} />\n      </nav>\n      <button\n        className=\"navbar-filter__button\"\n        type=\"button\"\n        aria-label=\"Abrir menu para buscar playlists\"\n        onClick={() => setIsOpen(true)}\n      >\n        <SearchSolid className=\"navbar-filter__button-icon\" />\n      </button>\n      {isOpen && (\n        // eslint-disable-next-line\n        <div className=\"navbar-filter__overlay\" onClick={() => setIsOpen(false)} />\n      )}\n    </>\n  );\n};\n\nexport default NavbarFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\nimport './PlaylistCard.scss';\n\nconst PlaylistCard = ({ playlist }) => {\n  const { name, description } = playlist;\n  const imageUrl = get(playlist, 'images[0].url');\n  const spotifyLink = get(playlist, 'external_urls.spotify');\n\n  return (\n    <a href={spotifyLink} className=\"playlist-card\">\n      <img\n        className=\"playlist-card__image\"\n        src={imageUrl}\n        alt=\"Capa da playlist\"\n      />\n      <div>\n        <div className=\"playlist-card__title\">{name}</div>\n        <div>{description}</div>\n      </div>\n    </a>\n  );\n};\n\nPlaylistCard.propTypes = {\n  playlist: PropTypes.shape({\n    name: PropTypes.string,\n    description: PropTypes.string,\n    images: PropTypes.array,\n    external_urls: PropTypes.object,\n  }).isRequired,\n};\n\nexport default PlaylistCard;\n","const filterPlaylists = (playlists, filter) => {\n  const lowerCaseFilter = filter.toLowerCase();\n\n  return playlists.filter((playlist) => {\n    const playlistName = playlist.name.toLowerCase();\n    return playlistName.includes(lowerCaseFilter);\n  });\n};\n\nexport default filterPlaylists;\n","import React, { useContext, useState, useEffect } from 'react';\nimport { useFormik } from 'formik';\n\nimport PlaylistsContext from '../../contexts/PlaylistsContext';\nimport Input from '../Form/Input/Input';\nimport PlaylistCard from './PlaylistCard';\nimport filterPlaylists from './filterPlaylists';\nimport './Playlists.scss';\n\nconst Playlists = () => {\n  const { playlists } = useContext(PlaylistsContext);\n  const [filteredPlaylists, setFilteredPlaylists] = useState([]);\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n    },\n  });\n\n  useEffect(() => {\n    const hasfilter = !!formik.values.name;\n    if (playlists && hasfilter) {\n      const newFilteredPlaylists = filterPlaylists(playlists, formik.values.name);\n      setFilteredPlaylists(newFilteredPlaylists);\n    } else {\n      setFilteredPlaylists(playlists);\n    }\n  }, [playlists, formik.values.name]);\n\n  return (\n    <div className=\"playlists\">\n      <Input\n        formik={formik}\n        field={{ id: 'name' }}\n        placeholder=\"Filtrar pelo nome da playlist\"\n        styleType=\"white\"\n      />\n      <div className=\"playlists__cards\">\n        {filteredPlaylists && filteredPlaylists.map((playlist) => (\n          <PlaylistCard key={playlist.id} playlist={playlist} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Playlists;\n","import React, { useContext, useEffect } from 'react';\n\nimport PlaylistsContext from '../../contexts/PlaylistsContext';\nimport NavbarFilter from '../../components/NavbarFilter/NavbarFilter';\nimport Playlists from '../../components/Playlists/Playlists';\nimport getFeaturedPlaylists from '../../api/getFeaturedPlaylists';\n\nconst Home = () => {\n  const { setPlaylists } = useContext(PlaylistsContext);\n\n  useEffect(() => {\n    // load some playlists for the first render\n    getFeaturedPlaylists({})\n      .then((newPlaylists) => setPlaylists(newPlaylists));\n  }, [setPlaylists]);\n\n  return (\n    <>\n      <NavbarFilter />\n      <Playlists />\n    </>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nimport constants from '../../constants';\n\nconst { CLIENT_ID, REDIRECT_URL } = constants;\n\nconst Login = () => (\n  <>\n    <div className=\"app__login\">\n      <h1 className=\"app__login-title\">Spotifood</h1>\n      <h2 className=\"app__login-description\">Pesquise pelas suas playlists preferidas</h2>\n      <a\n        className=\"button is-primary\"\n        href={`https://accounts.spotify.com/authorize?response_type=token&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URL)}`}\n      >\n        Fazer login com Spotify\n      </a>\n    </div>\n  </>\n);\n\nexport default Login;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport constants from '../../constants';\nimport './Toast.scss';\n\nconst { CLIENT_ID, REDIRECT_URL } = constants;\n\nconst Toast = ({ sessionExpired, errorMessage }) => {\n  if (sessionExpired) {\n    return (\n      <div className=\"toast toast--is-center\">\n        <div className=\"toast__message\">Sua sessão expirou</div>\n        <div>\n          <a\n            className=\"button is-primary is-small\"\n            href={`https://accounts.spotify.com/authorize?response_type=token&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(REDIRECT_URL)}`}\n          >\n            Fazer login novamente\n          </a>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"toast\">\n      <div className=\"toast__message\">Falha no servidor:</div>\n      <pre>{errorMessage}</pre>\n    </div>\n  );\n};\n\nToast.propTypes = {\n  sessionExpired: PropTypes.bool,\n  errorMessage: PropTypes.string,\n};\n\nToast.defaultProps = {\n  sessionExpired: false,\n  errorMessage: '',\n};\n\nexport default Toast;\n","import { toast } from 'react-toastify';\n\nimport Toast from '../components/Toast/Toast';\nimport { clearToken } from './token';\n\nconst handleResponseError = (error) => {\n  if (error.response) {\n    if (error.response.status === 401) {\n      toast(Toast({ sessionExpired: true }));\n      clearToken();\n    } else {\n      const { status, message } = error.response.data.error;\n      const errorMessage = `${status}: ${message}`;\n      toast(Toast({ errorMessage }));\n    }\n  }\n\n  return Promise.reject(error);\n};\n\nexport default handleResponseError;\n","import queryString from 'query-string';\nimport axios from 'axios';\n\nexport const getToken = () => {\n  let token = localStorage.getItem('token');\n  if (!token) {\n    token = queryString.parse(window.location.hash).access_token;\n    // clear token in the browser address url\n    window.history.pushState(null, '', window.location.href.split('#')[0]);\n  }\n\n  return token;\n};\n\nexport const setToken = (token) => {\n  localStorage.setItem('token', token);\n  axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n};\n\nexport const clearToken = () => {\n  localStorage.removeItem('token');\n};\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport PlaylistsContextProvider from './contexts/PlaylistsContextProvider';\nimport Home from './pages/Home/Home';\nimport Login from './pages/Login/Login';\nimport { getToken, setToken } from './api/token';\nimport handleResponseError from './api/handleResponseError';\nimport './styles/index.scss';\nimport './App.scss';\n\naxios.interceptors.response.use(null, handleResponseError);\n\nconst App = () => {\n  const [isLoadingToken, setIsLoadingToken] = useState(true);\n  const [isLoggedIn, setisLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const token = getToken();\n\n    if (token) {\n      setToken(token);\n      setisLoggedIn(true);\n    }\n    setIsLoadingToken(false);\n  }, []);\n\n  if (isLoadingToken) {\n    return null;\n  }\n\n  return (\n    <PlaylistsContextProvider>\n      <ToastContainer\n        position=\"top-left\"\n        autoClose={false}\n        closeOnClick={false}\n        pauseOnVisibilityChange\n      />\n      <div className=\"app\">\n        {isLoggedIn && (\n          <Home />\n        )}\n        {!isLoggedIn && (\n          <Login />\n        )}\n      </div>\n    </PlaylistsContextProvider>\n  );\n};\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}